AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: トマトの社員管理システムのバックエンド

Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
         CidrBlock: 10.0.0.0/16
         EnableDnsHostnames: true
         EnableDnsSupport: true
         Tags:
              - Key: Name
                Value: Backend-VPC
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 0, !GetAZs '']
         CidrBlock: 10.0.1.0/24
         MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 0, !GetAZs '']
         CidrBlock: 10.0.2.0/24
         MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
         VpcId: !Ref VPC
         InternetGatewayId: !Ref InternetGateway
  
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
         Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
         SubnetId: !Ref PublicSubnet
         AllocationId: !GetAtt NatGatewayEIP.AllocationId

  ReactBucket:
    Type: AWS::S3::Bucket
    Properties:
         BucketName: !Sub ${AWS::StackName}-react-bucket

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
         BucketName: !Sub ${AWS::StackName}-assets-bucket

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
         BucketName: !Sub ${AWS::StackName}-logs-bucket

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
         
  LambdaFunction:
    Type: 

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
           - email
      UsernameAttributes:
           - email
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-user-pool
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
           DefaultCacheBehavior:
                Compress: false
                DefaultTTL: 86400
                FieldLevelEncryptionId: 
                MaxTTL: 31536000
                MinTTL: 0
                SmoothStreaming: false
                TargetOriginId: S30Origin
                ViewerProtocolPolicy: redirect-to-https
                ForwardedValues:
                     QueryString: false
           Enabled: true
           Origins:
                - DomainName: !GetAtt ReactBucket.RegionalDomainName
                  Id: S30Origin
                  S30OriginConfig: {}
    
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: !Sub ${AWS::StackName}-topic

    CloudWatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub /aws/lambda/${LambdaFunction}
        RetentionInDays: 30

Outputs:
    ApiUrl:
      Description: API Gateway endpoint URL
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/"

    UserPoolId:
      Description: Cognito User Pool ID
      Value: !Ref UserPool

    UserPoolClientId:
      Description: Cognito User Pool Client ID
      Value: !Ref UserPoolClient

    CloudFrontDomainName:
      Description: CloudFront Distribution Domain Name
      Value: !GetAtt CloudFrontDistribution.DomainName

    SNSTopicArn:
      Description: SNS Topic ARN
      Value: !Ref SNSTopic